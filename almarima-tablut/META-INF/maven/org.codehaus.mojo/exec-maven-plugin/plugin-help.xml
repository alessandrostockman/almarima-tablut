<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.6 -->

<plugin>
  <name>Exec Maven Plugin</name>
  <description>A plugin to allow execution of system and Java programs</description>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>exec-maven-plugin</artifactId>
  <version>3.0.0</version>
  <goalPrefix>exec</goalPrefix>
  <mojos>
    <mojo>
      <goal>exec</goal>
      <description>A Plugin for executing external programs.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.exec.ExecMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addOutputToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project output directory to classpath. This might be undesirable when the exec plugin is run before the compile step. Default is true.</description>
        </parameter>
        <parameter>
          <name>addResourcesToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project resource directories to classpath. This is especially useful if the exec plugin is used for a code generator that reads its settings from the classpath.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of arguments passed to the executable, which should be of type &lt;argument&gt; or &lt;classpath&gt;. Can be overridden by using the exec.args environment variable.
</description>
        </parameter>
        <parameter>
          <name>async</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the child process executes asynchronously and build execution continues in parallel.</description>
        </parameter>
        <parameter>
          <name>asyncDestroyOnShutdown</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, the asynchronous child process is destroyed upon JVM shutdown. If set to false, asynchronous child process continues execution after JVM shutdown. Applies only to asynchronous processes; ignored for synchronous processes.</description>
        </parameter>
        <parameter>
          <name>classpathScope</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the scope of the classpath passed to the plugin. Set to compile,test,runtime or system depending on your needs. Since 1.1.2, the default value is &apos;runtime&apos; instead of &apos;compile&apos;.</description>
        </parameter>
        <parameter>
          <name>commandlineArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments separated by space for the executed program. For example: &apos;-j 20&apos;</description>
        </parameter>
        <parameter>
          <name>environmentScript</name>
          <type>java.io.File</type>
          <since>1.4.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Environment script to be merged with environmentVariables This script is platform specifics, on Unix its must be Bourne shell format. Use this feature if you have a need to create environment variable dynamically such as invoking Visual Studio environment script file</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>1.1-beta-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Environment variables to pass to the executed program. For example if you want to set the LANG var: &lt;environmentVariables&gt; &lt;LANG&gt;en_US&lt;/LANG&gt; &lt;/environmentVariables&gt;
</description>
        </parameter>
        <parameter>
          <name>executable</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The executable. Can be a full path or the name of the executable. In the latter case, the executable must be in the PATH for the execution to work. Omit when using executableDependency.

The plugin will search for the executable in the following order:

1.	relative to the root of the project
2.	as toolchain executable
3.	relative to the working directory (Windows only)
4.	relative to the directories specified in the system property PATH (Windows Only)
Otherwise use the executable as is.

</description>
        </parameter>
        <parameter>
          <name>executableDependency</name>
          <type>org.codehaus.mojo.exec.ExecutableDependency</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>If provided the ExecutableDependency identifies which of the plugin dependencies contains the executable class. This will have the effect of only including plugin dependencies required by the identified ExecutableDependency.
If includeProjectDependencies is set to true, all of the project dependencies will be included on the executable&apos;s classpath. Whether a particular project dependency is a dependency of the identified ExecutableDependency will be irrelevant to its inclusion in the classpath.
</description>
        </parameter>
        <parameter>
          <name>longClasspath</name>
          <type>boolean</type>
          <since>1.1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the classpath and the main class will be written to a MANIFEST.MF file and wrapped into a jar. Instead of &apos;-classpath/-cp CLASSPATH mainClass&apos; the exec plugin executes &apos;-jar maven-exec.jar&apos;.</description>
        </parameter>
        <parameter>
          <name>longModulepath</name>
          <type>boolean</type>
          <since>1.1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the modulepath and the main class will be written as an @arg file Instead of &apos;--module-path/-p MODULEPATH &apos; the exec plugin executes &apos;@modulepath&apos;.</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>1.1-beta-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Program standard and error output will be redirected to the file specified by this optional field. If not specified the standard Maven logging is used.
Note: Be aware that System.out and System.err use buffering, so don&apos;t rely on the order!</description>
        </parameter>
        <parameter>
          <name>quietLogs</name>
          <type>boolean</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>When combined with exec.useMavenLogger=true, prints all executed program output at debug level instead of the default info level to the Maven logger.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <alias>skip</alias>
          <type>boolean</type>
          <since>1.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution. Starting with version 1.4.0 the former name skip has been changed into exec.skip.</description>
        </parameter>
        <parameter>
          <name>sourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled. Use this if your plugin generates source code.</description>
        </parameter>
        <parameter>
          <name>successCodes</name>
          <type>int[]</type>
          <since>1.1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exit codes to be resolved as successful execution for non-compliant applications (applications not returning 0 for success).</description>
        </parameter>
        <parameter>
          <name>testSourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled for testing. Use this if your plugin generates test source code.</description>
        </parameter>
        <parameter>
          <name>timeout</name>
          <type>int</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Timeout in full milliseconds, default is 0.

When set to a value larger than zero, the executable is forcefully terminated if it did not finish within this time, and the build will fail.
</description>
        </parameter>
        <parameter>
          <name>toolchain</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The toolchain. If omitted, &apos;jdk&apos; is assumed.
</description>
        </parameter>
        <parameter>
          <name>useMavenLogger</name>
          <type>boolean</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>When enabled, program standard and error output will be redirected to the Maven logger as Info and Error level logs, respectively. If not enabled the traditional behavior of program output being directed to standard System.out and System.err is used.

NOTE: When enabled, to log the program standard out as Maven Debug level instead of Info level use exec.quietLogs=true.

This option can be extremely helpful when combined with multithreaded builds for two reasons:

-	Program output is suffixed with the owning thread name, making it easier to trace execution of a specific projects build thread.
-	Program output will not get jumbled with other maven log messages.
For Example, if using exec:exec to run a script to echo a count from 1 to 100 as:
for i in {1..100}
do
  echo &apos;${project.artifactId} - $i&apos;
done
When this script is run multi-threaded on two modules, module1 and module2, you might get output such as:
[BuilderThread 1] [INFO] --- exec-maven-plugin:1.6.0:exec (test) @ module1 ---
[BuilderThread 2] [INFO] --- exec-maven-plugin:1.6.0:exec (test) @ module2 ---
...
module2 - 98
modu
module1 - 97
module1 -
le2 - 9899
...
With this flag enabled, the output will instead come something similar to:
...
[Exec Stream Pumper] [INFO] [BuilderThread 2] module2 - 98
[Exec Stream Pumper] [INFO] [BuilderThread 1] module1 - 97
[Exec Stream Pumper] [INFO] [BuilderThread 1] module1 - 98
[Exec Stream Pumper] [INFO] [BuilderThread 2] module2 - 99
...
NOTE 1: To show the thread in the Maven log, configure the Maven installations conf/logging/simplelogger.properties option: org.slf4j.simpleLogger.showThreadName=true
NOTE 2: This option is ignored when exec.outputFile is specified.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The current working directory. Optional. If not specified, basedir will be used.</description>
        </parameter>
      </parameters>
      <configuration>
        <addOutputToClasspath implementation="boolean" default-value="true">${addOutputToClasspath}</addOutputToClasspath>
        <addResourcesToClasspath implementation="boolean" default-value="false">${addResourcesToClasspath}</addResourcesToClasspath>
        <async implementation="boolean" default-value="false">${exec.async}</async>
        <asyncDestroyOnShutdown implementation="boolean" default-value="true">${exec.asyncDestroyOnShutdown}</asyncDestroyOnShutdown>
        <classpathScope implementation="java.lang.String" default-value="runtime">${exec.classpathScope}</classpathScope>
        <commandlineArgs implementation="java.lang.String">${exec.args}</commandlineArgs>
        <executable implementation="java.lang.String">${exec.executable}</executable>
        <longClasspath implementation="boolean" default-value="false">${exec.longClasspath}</longClasspath>
        <longModulepath implementation="boolean" default-value="true">${exec.longModulepath}</longModulepath>
        <outputFile implementation="java.io.File">${exec.outputFile}</outputFile>
        <quietLogs implementation="boolean" default-value="false">${exec.quietLogs}</quietLogs>
        <skip implementation="boolean" default-value="false">${exec.skip}</skip>
        <sourceRoot implementation="java.io.File">${sourceRoot}</sourceRoot>
        <testSourceRoot implementation="java.io.File">${testSourceRoot}</testSourceRoot>
        <timeout implementation="int" default-value="0">${exec.timeout}</timeout>
        <toolchain implementation="java.lang.String" default-value="jdk">${exec.toolchain}</toolchain>
        <useMavenLogger implementation="boolean" default-value="false">${exec.useMavenLogger}</useMavenLogger>
        <workingDirectory implementation="java.io.File">${exec.workingdir}</workingDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on exec-maven-plugin.
Call mvn exec:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.exec.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>java</goal>
      <description>Executes the supplied java class in the current VM with the enclosing project&apos;s dependencies as classpath.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.exec.ExecJavaMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.util.List</type>
          <since>1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>addOutputToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project output directory to classpath. This might be undesirable when the exec plugin is run before the compile step. Default is true.</description>
        </parameter>
        <parameter>
          <name>addResourcesToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project resource directories to classpath. This is especially useful if the exec plugin is used for a code generator that reads its settings from the classpath.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The class arguments.</description>
        </parameter>
        <parameter>
          <name>classpathScope</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the scope of the classpath passed to the plugin. Set to compile,test,runtime or system depending on your needs. Since 1.1.2, the default value is &apos;runtime&apos; instead of &apos;compile&apos;.</description>
        </parameter>
        <parameter>
          <name>cleanupDaemonThreads</name>
          <type>boolean</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to interrupt/join and possibly stop the daemon threads upon quitting.
If this is false, maven does nothing about the daemon threads. When maven has no more work to do, the VM will normally terminate any remaining daemon threads.
In certain cases (in particular if maven is embedded), you might need to keep this enabled to make sure threads are properly cleaned up to ensure they don&apos;t interfere with subsequent activity. In that case, see daemonThreadJoinTimeout and stopUnresponsiveDaemonThreads for further tuning.
</description>
        </parameter>
        <parameter>
          <name>commandlineArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments separated by space for the executed program. For example: &apos;-j 20&apos;</description>
        </parameter>
        <parameter>
          <name>daemonThreadJoinTimeout</name>
          <type>long</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>This defines the number of milliseconds to wait for daemon threads to quit following their interruption.
This is only taken into account if cleanupDaemonThreads is true. A value &lt;=0 means to not timeout (i.e. wait indefinitely for threads to finish). Following a timeout, a warning will be logged.
Note: properly coded threads should terminate upon interruption but some threads may prove problematic: as the VM does interrupt daemon threads, some code may not have been written to handle interruption properly. For example java.util.Timer is known to not handle interruptions in JDK &lt;= 1.6. So it is not possible for us to infinitely wait by default otherwise maven could hang. A sensible default value has been chosen, but this default value may change in the future based on user feedback.
</description>
        </parameter>
        <parameter>
          <name>executableDependency</name>
          <type>org.codehaus.mojo.exec.ExecutableDependency</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>If provided the ExecutableDependency identifies which of the plugin dependencies contains the executable class. This will have the effect of only including plugin dependencies required by the identified ExecutableDependency.
If includeProjectDependencies is set to true, all of the project dependencies will be included on the executable&apos;s classpath. Whether a particular project dependency is a dependency of the identified ExecutableDependency will be irrelevant to its inclusion in the classpath.
</description>
        </parameter>
        <parameter>
          <name>includePluginDependencies</name>
          <type>boolean</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if this plugin&apos;s dependencies should be used when executing the main class. This is useful when project dependencies are not appropriate. Using only the plugin dependencies can be particularly useful when the project is not a java project. For example a mvn project using the csharp plugins only expects to see dotnet libraries as dependencies.</description>
        </parameter>
        <parameter>
          <name>includeProjectDependencies</name>
          <type>boolean</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if the project dependencies should be used when executing the main class.</description>
        </parameter>
        <parameter>
          <name>keepAlive</name>
          <type>boolean</type>
          <since>1.0</since>
          <deprecated>since 1.1-alpha-1</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if mojo should be kept running after the mainclass terminates. Use full for server like apps with daemon threads.</description>
        </parameter>
        <parameter>
          <name>killAfter</name>
          <type>long</type>
          <since>1.0</since>
          <deprecated>since 1.1-alpha-1</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Deprecated this is not needed anymore.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>The main class to execute.
With Java 9 and above you can prefix it with the modulename, e.g. com.greetings/com.greetings.Main Without modulename the classpath will be used, with modulename a new modulelayer will be created.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <alias>skip</alias>
          <type>boolean</type>
          <since>1.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution. Starting with version 1.4.0 the former name skip has been changed into exec.skip.</description>
        </parameter>
        <parameter>
          <name>sourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled. Use this if your plugin generates source code.</description>
        </parameter>
        <parameter>
          <name>stopUnresponsiveDaemonThreads</name>
          <type>boolean</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Wether to call Thread.stop() following a timing out of waiting for an interrupted thread to finish. This is only taken into account if cleanupDaemonThreads is true and the daemonThreadJoinTimeout threshold has been reached for an uncooperative thread. If this is false, or if Thread.stop() fails to get the thread to stop, then a warning is logged and Maven will continue on while the affected threads (and related objects in memory) linger on. Consider setting this to true if you are invoking problematic code that you can&apos;t fix. An example is Timer which doesn&apos;t respond to interruption. To have Timer fixed, vote for this bug.</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.codehaus.mojo.exec.Property[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of system properties to be passed. Note: as the execution is not forked, some system properties required by the JVM cannot be passed here. Use MAVEN_OPTS or the exec:exec instead. See the user guide for more information.</description>
        </parameter>
        <parameter>
          <name>testSourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled for testing. Use this if your plugin generates test source code.</description>
        </parameter>
      </parameters>
      <configuration>
        <addOutputToClasspath implementation="boolean" default-value="true">${addOutputToClasspath}</addOutputToClasspath>
        <addResourcesToClasspath implementation="boolean" default-value="false">${addResourcesToClasspath}</addResourcesToClasspath>
        <arguments implementation="java.lang.String[]">${exec.arguments}</arguments>
        <classpathScope implementation="java.lang.String" default-value="runtime">${exec.classpathScope}</classpathScope>
        <cleanupDaemonThreads implementation="boolean" default-value="true">${exec.cleanupDaemonThreads}</cleanupDaemonThreads>
        <commandlineArgs implementation="java.lang.String">${exec.args}</commandlineArgs>
        <daemonThreadJoinTimeout implementation="long" default-value="15000">${exec.daemonThreadJoinTimeout}</daemonThreadJoinTimeout>
        <includePluginDependencies implementation="boolean" default-value="false">${exec.includePluginsDependencies}</includePluginDependencies>
        <includeProjectDependencies implementation="boolean" default-value="true">${exec.includeProjectDependencies}</includeProjectDependencies>
        <keepAlive implementation="boolean" default-value="false">${exec.keepAlive}</keepAlive>
        <killAfter implementation="long" default-value="-1">${exec.killAfter}</killAfter>
        <mainClass implementation="java.lang.String">${exec.mainClass}</mainClass>
        <skip implementation="boolean" default-value="false">${exec.skip}</skip>
        <sourceRoot implementation="java.io.File">${sourceRoot}</sourceRoot>
        <stopUnresponsiveDaemonThreads implementation="boolean" default-value="false">${exec.stopUnresponsiveDaemonThreads}</stopUnresponsiveDaemonThreads>
        <testSourceRoot implementation="java.io.File">${testSourceRoot}</testSourceRoot>
      </configuration>
    </mojo>
  </mojos>
</plugin>