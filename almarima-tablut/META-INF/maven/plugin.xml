<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.6 -->

<plugin>
  <name>Exec Maven Plugin</name>
  <description>A plugin to allow execution of system and Java programs</description>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>exec-maven-plugin</artifactId>
  <version>3.0.0</version>
  <goalPrefix>exec</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>exec</goal>
      <description>A Plugin for executing external programs.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.exec.ExecMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addOutputToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project output directory to classpath. This might be undesirable when the exec plugin is run before the
compile step. Default is &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>addResourcesToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project resource directories to classpath. This is especially useful if the exec plugin is used for a code
generator that reads its settings from the classpath.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
A list of arguments passed to the {@code executable}, which should be of type &lt;code&gt;&amp;lt;argument&amp;gt;&lt;/code&gt; or
&lt;code&gt;&amp;lt;classpath&amp;gt;&lt;/code&gt;. Can be overridden by using the &lt;code&gt;exec.args&lt;/code&gt; environment variable.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>async</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the child process executes asynchronously and build execution continues in parallel.</description>
        </parameter>
        <parameter>
          <name>asyncDestroyOnShutdown</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, the asynchronous child process is destroyed upon JVM shutdown. If set to false, asynchronous
child process continues execution after JVM shutdown. Applies only to asynchronous processes; ignored for
synchronous processes.</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>buildDirectory</name>
          <type>java.io.File</type>
          <since>3.0.0</since>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>classpathScope</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the scope of the classpath passed to the plugin. Set to compile,test,runtime or system depending on your
needs. Since 1.1.2, the default value is &apos;runtime&apos; instead of &apos;compile&apos;.</description>
        </parameter>
        <parameter>
          <name>commandlineArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments separated by space for the executed program. For example: &quot;-j 20&quot;</description>
        </parameter>
        <parameter>
          <name>environmentScript</name>
          <type>java.io.File</type>
          <since>1.4.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Environment script to be merged with &lt;i&gt;environmentVariables&lt;/i&gt; This script is platform specifics, on Unix its
must be Bourne shell format. Use this feature if you have a need to create environment variable dynamically such
as invoking Visual Studio environment script file</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>1.1-beta-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Environment variables to pass to the executed program. For example if you want to set the LANG var:
&lt;code&gt;&amp;lt;environmentVariables&amp;gt;
    &amp;lt;LANG&amp;gt;en_US&amp;lt;/LANG&amp;gt;
&amp;lt;/environmentVariables&amp;gt;
&lt;/code&gt;
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>executable</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The executable. Can be a full path or the name of the executable. In the latter case, the executable must be in
the PATH for the execution to work. Omit when using &lt;code&gt;executableDependency&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The plugin will search for the executable in the following order:
&lt;ol&gt;
&lt;li&gt;relative to the root of the project&lt;/li&gt;
&lt;li&gt;as toolchain executable&lt;/li&gt;
&lt;li&gt;relative to the working directory (Windows only)&lt;/li&gt;
&lt;li&gt;relative to the directories specified in the system property PATH (Windows Only)&lt;/li&gt;
&lt;/ol&gt;
Otherwise use the executable as is.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>executableDependency</name>
          <type>org.codehaus.mojo.exec.ExecutableDependency</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>If provided the ExecutableDependency identifies which of the plugin dependencies contains the executable class.
This will have the effect of only including plugin dependencies required by the identified ExecutableDependency.

&lt;p&gt;
If includeProjectDependencies is set to &lt;code&gt;true&lt;/code&gt;, all of the project dependencies will be included on
the executable&apos;s classpath. Whether a particular project dependency is a dependency of the identified
ExecutableDependency will be irrelevant to its inclusion in the classpath.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>longClasspath</name>
          <type>boolean</type>
          <since>1.1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the classpath and the main class will be written to a MANIFEST.MF file and wrapped into a jar.
Instead of &apos;-classpath/-cp CLASSPATH mainClass&apos; the exec plugin executes &apos;-jar maven-exec.jar&apos;.</description>
        </parameter>
        <parameter>
          <name>longModulepath</name>
          <type>boolean</type>
          <since>1.1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the modulepath and the main class will be written as an @arg file
Instead of &apos;--module-path/-p MODULEPATH &apos; the exec plugin executes &apos;@modulepath&apos;.</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>1.1-beta-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Program standard and error output will be redirected to the file specified by this optional field. If not
specified the standard Maven logging is used. &lt;br/&gt;
&lt;strong&gt;Note:&lt;/strong&gt; Be aware that &lt;code&gt;System.out&lt;/code&gt; and &lt;code&gt;System.err&lt;/code&gt; use buffering, so don&apos;t
rely on the order!</description>
        </parameter>
        <parameter>
          <name>plugin</name>
          <type>org.apache.maven.plugin.descriptor.PluginDescriptor</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>pluginDependencies</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>false</required>
          <editable>false</editable>
          <description>The enclosing project.</description>
        </parameter>
        <parameter>
          <name>quietLogs</name>
          <type>boolean</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>When combined with {@code exec.useMavenLogger=true}, prints all executed
program output at debug level instead of the default info level to the Maven
logger.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>false</required>
          <editable>false</editable>
          <description>The current build session instance. This is used for toolchain manager API calls.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <alias>skip</alias>
          <type>boolean</type>
          <since>1.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution. Starting with version 1.4.0 the former name &lt;code&gt;skip&lt;/code&gt; has been changed into
&lt;code&gt;exec.skip&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>sourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled. Use this if your plugin
generates source code.</description>
        </parameter>
        <parameter>
          <name>successCodes</name>
          <type>int[]</type>
          <since>1.1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exit codes to be resolved as successful execution for non-compliant applications (applications not returning 0
for success).</description>
        </parameter>
        <parameter>
          <name>testSourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled for testing. Use this if your
plugin generates test source code.</description>
        </parameter>
        <parameter>
          <name>timeout</name>
          <type>int</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Timeout in full milliseconds, default is {@code 0}.
&lt;p&gt;
&lt;p&gt;
When set to a value larger than zero, the executable is forcefully
terminated if it did not finish within this time, and the build will
fail.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>toolchain</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
The toolchain. If omitted, &lt;code&gt;&quot;jdk&quot;&lt;/code&gt; is assumed.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>useMavenLogger</name>
          <type>boolean</type>
          <since>3.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>When enabled, program standard and error output will be redirected to the
Maven logger as &lt;i&gt;Info&lt;/i&gt; and &lt;i&gt;Error&lt;/i&gt; level logs, respectively. If not enabled the
traditional behavior of program output being directed to standard System.out
and System.err is used.&lt;br&gt;
&lt;br&gt;
NOTE: When enabled, to log the program standard out as Maven &lt;i&gt;Debug&lt;/i&gt; level instead of
&lt;i&gt;Info&lt;/i&gt; level use {@code exec.quietLogs=true}. &lt;br&gt;
&lt;br&gt;
This option can be extremely helpful when combined with multithreaded builds
for two reasons:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Program output is suffixed with the owning thread name, making it easier
to trace execution of a specific projects build thread.&lt;/li&gt;
&lt;li&gt;Program output will not get jumbled with other maven log messages.&lt;/li&gt;
&lt;/ul&gt;

For Example, if using {@code exec:exec} to run a script to echo a count from
1 to 100 as:

&lt;pre&gt;
for i in {1..100}
do
  echo &quot;${project.artifactId} - $i&quot;
done
&lt;/pre&gt;

When this script is run multi-threaded on two modules, {@code module1} and
{@code module2}, you might get output such as:

&lt;pre&gt;
[BuilderThread 1] [INFO] --- exec-maven-plugin:1.6.0:exec (test) @ module1 ---
[BuilderThread 2] [INFO] --- exec-maven-plugin:1.6.0:exec (test) @ module2 ---
...
module2 - 98
modu
module1 - 97
module1 -
le2 - 9899
...
&lt;/pre&gt;

With this flag enabled, the output will instead come something similar to:

&lt;pre&gt;
...
[Exec Stream Pumper] [INFO] [BuilderThread 2] module2 - 98
[Exec Stream Pumper] [INFO] [BuilderThread 1] module1 - 97
[Exec Stream Pumper] [INFO] [BuilderThread 1] module1 - 98
[Exec Stream Pumper] [INFO] [BuilderThread 2] module2 - 99
...
&lt;/pre&gt;

NOTE 1: To show the thread in the Maven log, configure the Maven
installations &lt;i&gt;conf/logging/simplelogger.properties&lt;/i&gt; option:
{@code org.slf4j.simpleLogger.showThreadName=true}&lt;br&gt;

NOTE 2: This option is ignored when {@code exec.outputFile} is specified.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The current working directory. Optional. If not specified, basedir will be used.</description>
        </parameter>
      </parameters>
      <configuration>
        <addOutputToClasspath implementation="boolean" default-value="true">${addOutputToClasspath}</addOutputToClasspath>
        <addResourcesToClasspath implementation="boolean" default-value="false">${addResourcesToClasspath}</addResourcesToClasspath>
        <async implementation="boolean" default-value="false">${exec.async}</async>
        <asyncDestroyOnShutdown implementation="boolean" default-value="true">${exec.asyncDestroyOnShutdown}</asyncDestroyOnShutdown>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <buildDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <classpathScope implementation="java.lang.String" default-value="runtime">${exec.classpathScope}</classpathScope>
        <commandlineArgs implementation="java.lang.String">${exec.args}</commandlineArgs>
        <executable implementation="java.lang.String">${exec.executable}</executable>
        <longClasspath implementation="boolean" default-value="false">${exec.longClasspath}</longClasspath>
        <longModulepath implementation="boolean" default-value="true">${exec.longModulepath}</longModulepath>
        <outputFile implementation="java.io.File">${exec.outputFile}</outputFile>
        <plugin implementation="org.apache.maven.plugin.descriptor.PluginDescriptor" default-value="${plugin}"/>
        <pluginDependencies implementation="java.util.List" default-value="${plugin.artifacts}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quietLogs implementation="boolean" default-value="false">${exec.quietLogs}</quietLogs>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean" default-value="false">${exec.skip}</skip>
        <sourceRoot implementation="java.io.File">${sourceRoot}</sourceRoot>
        <testSourceRoot implementation="java.io.File">${testSourceRoot}</testSourceRoot>
        <timeout implementation="int" default-value="0">${exec.timeout}</timeout>
        <toolchain implementation="java.lang.String" default-value="jdk">${exec.toolchain}</toolchain>
        <useMavenLogger implementation="boolean" default-value="false">${exec.useMavenLogger}</useMavenLogger>
        <workingDirectory implementation="java.io.File">${exec.workingdir}</workingDirectory>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>projectBuilder</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on exec-maven-plugin.&lt;br&gt;
Call &lt;code&gt;mvn exec:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt;&lt;/code&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.exec.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &lt;code&gt;true&lt;/code&gt;, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>java</goal>
      <description>Executes the supplied java class in the current VM with the enclosing project&apos;s dependencies as classpath.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.exec.ExecJavaMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addOutputToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project output directory to classpath. This might be undesirable when the exec plugin is run before the
compile step. Default is &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>addResourcesToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project resource directories to classpath. This is especially useful if the exec plugin is used for a code
generator that reads its settings from the classpath.</description>
        </parameter>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.util.List</type>
          <since>1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The class arguments.</description>
        </parameter>
        <parameter>
          <name>classpathScope</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the scope of the classpath passed to the plugin. Set to compile,test,runtime or system depending on your
needs. Since 1.1.2, the default value is &apos;runtime&apos; instead of &apos;compile&apos;.</description>
        </parameter>
        <parameter>
          <name>cleanupDaemonThreads</name>
          <type>boolean</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to interrupt/join and possibly stop the daemon threads upon quitting. &lt;br/&gt;
If this is &lt;code&gt;false&lt;/code&gt;, maven does nothing about the daemon threads. When maven has no more work to do,
the VM will normally terminate any remaining daemon threads.
&lt;p&gt;
In certain cases (in particular if maven is embedded), you might need to keep this enabled to make sure threads
are properly cleaned up to ensure they don&apos;t interfere with subsequent activity. In that case, see
{@link #daemonThreadJoinTimeout} and {@link #stopUnresponsiveDaemonThreads} for further tuning.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>commandlineArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments separated by space for the executed program. For example: &quot;-j 20&quot;</description>
        </parameter>
        <parameter>
          <name>daemonThreadJoinTimeout</name>
          <type>long</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>This defines the number of milliseconds to wait for daemon threads to quit following their interruption.&lt;br/&gt;
This is only taken into account if {@link #cleanupDaemonThreads} is &lt;code&gt;true&lt;/code&gt;. A value &amp;lt;=0 means to
not timeout (i.e. wait indefinitely for threads to finish). Following a timeout, a warning will be logged.
&lt;p&gt;
Note: properly coded threads &lt;i&gt;should&lt;/i&gt; terminate upon interruption but some threads may prove problematic: as
the VM does interrupt daemon threads, some code may not have been written to handle interruption properly. For
example java.util.Timer is known to not handle interruptions in JDK &amp;lt;= 1.6. So it is not possible for us to
infinitely wait by default otherwise maven could hang. A sensible default value has been chosen, but this default
value &lt;i&gt;may change&lt;/i&gt; in the future based on user feedback.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>executableDependency</name>
          <type>org.codehaus.mojo.exec.ExecutableDependency</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>If provided the ExecutableDependency identifies which of the plugin dependencies contains the executable class.
This will have the effect of only including plugin dependencies required by the identified ExecutableDependency.

&lt;p&gt;
If includeProjectDependencies is set to &lt;code&gt;true&lt;/code&gt;, all of the project dependencies will be included on
the executable&apos;s classpath. Whether a particular project dependency is a dependency of the identified
ExecutableDependency will be irrelevant to its inclusion in the classpath.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includePluginDependencies</name>
          <type>boolean</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if this plugin&apos;s dependencies should be used when executing the main class.
&lt;p/&gt;
This is useful when project dependencies are not appropriate. Using only the plugin dependencies can be
particularly useful when the project is not a java project. For example a mvn project using the csharp plugins
only expects to see dotnet libraries as dependencies.</description>
        </parameter>
        <parameter>
          <name>includeProjectDependencies</name>
          <type>boolean</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if the project dependencies should be used when executing the main class.</description>
        </parameter>
        <parameter>
          <name>keepAlive</name>
          <type>boolean</type>
          <since>1.0</since>
          <deprecated>since 1.1-alpha-1</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if mojo should be kept running after the mainclass terminates. Use full for server like apps with
daemon threads.</description>
        </parameter>
        <parameter>
          <name>killAfter</name>
          <type>long</type>
          <since>1.0</since>
          <deprecated>since 1.1-alpha-1</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Deprecated this is not needed anymore.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>The main class to execute.&lt;br&gt;
With Java 9 and above you can prefix it with the modulename, e.g. &lt;code&gt;com.greetings/com.greetings.Main&lt;/code&gt;
Without modulename the classpath will be used, with modulename a new modulelayer will be created.</description>
        </parameter>
        <parameter>
          <name>plugin</name>
          <type>org.apache.maven.plugin.descriptor.PluginDescriptor</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>pluginDependencies</name>
          <type>java.util.List</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>false</required>
          <editable>false</editable>
          <description>The enclosing project.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <alias>skip</alias>
          <type>boolean</type>
          <since>1.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution. Starting with version 1.4.0 the former name &lt;code&gt;skip&lt;/code&gt; has been changed into
&lt;code&gt;exec.skip&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>sourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled. Use this if your plugin
generates source code.</description>
        </parameter>
        <parameter>
          <name>stopUnresponsiveDaemonThreads</name>
          <type>boolean</type>
          <since>1.1-beta-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Wether to call {@link Thread#stop()} following a timing out of waiting for an interrupted thread to finish. This
is only taken into account if {@link #cleanupDaemonThreads} is &lt;code&gt;true&lt;/code&gt; and the
{@link #daemonThreadJoinTimeout} threshold has been reached for an uncooperative thread. If this is
&lt;code&gt;false&lt;/code&gt;, or if {@link Thread#stop()} fails to get the thread to stop, then a warning is logged and
Maven will continue on while the affected threads (and related objects in memory) linger on. Consider setting
this to &lt;code&gt;true&lt;/code&gt; if you are invoking problematic code that you can&apos;t fix. An example is
{@link java.util.Timer} which doesn&apos;t respond to interruption. To have &lt;code&gt;Timer&lt;/code&gt; fixed, vote for
&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6336543&quot;&gt;this bug&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>org.codehaus.mojo.exec.Property[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of system properties to be passed. Note: as the execution is not forked, some system properties required
by the JVM cannot be passed here. Use MAVEN_OPTS or the exec:exec instead. See the user guide for more
information.</description>
        </parameter>
        <parameter>
          <name>testSourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled for testing. Use this if your
plugin generates test source code.</description>
        </parameter>
      </parameters>
      <configuration>
        <addOutputToClasspath implementation="boolean" default-value="true">${addOutputToClasspath}</addOutputToClasspath>
        <addResourcesToClasspath implementation="boolean" default-value="false">${addResourcesToClasspath}</addResourcesToClasspath>
        <arguments implementation="java.lang.String[]">${exec.arguments}</arguments>
        <classpathScope implementation="java.lang.String" default-value="runtime">${exec.classpathScope}</classpathScope>
        <cleanupDaemonThreads implementation="boolean" default-value="true">${exec.cleanupDaemonThreads}</cleanupDaemonThreads>
        <commandlineArgs implementation="java.lang.String">${exec.args}</commandlineArgs>
        <daemonThreadJoinTimeout implementation="long" default-value="15000">${exec.daemonThreadJoinTimeout}</daemonThreadJoinTimeout>
        <includePluginDependencies implementation="boolean" default-value="false">${exec.includePluginsDependencies}</includePluginDependencies>
        <includeProjectDependencies implementation="boolean" default-value="true">${exec.includeProjectDependencies}</includeProjectDependencies>
        <keepAlive implementation="boolean" default-value="false">${exec.keepAlive}</keepAlive>
        <killAfter implementation="long" default-value="-1">${exec.killAfter}</killAfter>
        <mainClass implementation="java.lang.String">${exec.mainClass}</mainClass>
        <plugin implementation="org.apache.maven.plugin.descriptor.PluginDescriptor" default-value="${plugin}"/>
        <pluginDependencies implementation="java.util.List" default-value="${plugin.artifacts}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean" default-value="false">${exec.skip}</skip>
        <sourceRoot implementation="java.io.File">${sourceRoot}</sourceRoot>
        <stopUnresponsiveDaemonThreads implementation="boolean" default-value="false">${exec.stopUnresponsiveDaemonThreads}</stopUnresponsiveDaemonThreads>
        <testSourceRoot implementation="java.io.File">${testSourceRoot}</testSourceRoot>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.transfer.artifact.resolve.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.transfer.dependencies.resolve.DependencyResolver</role>
          <field-name>dependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.ProjectBuilder</role>
          <field-name>projectBuilder</field-name>
        </requirement>
      </requirements>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings-builder</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model-builder</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-aether-provider</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-impl</artifactId>
      <type>jar</type>
      <version>1.7</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-spi</artifactId>
      <type>jar</type>
      <version>1.7</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-api</artifactId>
      <type>jar</type>
      <version>1.7</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-util</artifactId>
      <type>jar</type>
      <version>1.7</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-plexus</artifactId>
      <type>jar</type>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-bean</artifactId>
      <type>jar</type>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guice</artifactId>
      <type>jar</type>
      <version>2.1.7</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-classworlds</artifactId>
      <type>jar</type>
      <version>2.2.3</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-sec-dispatcher</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-cipher</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>3.0.20</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-component-annotations</artifactId>
      <type>jar</type>
      <version>1.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-exec</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-artifact-transfer</artifactId>
      <type>jar</type>
      <version>0.10.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-common-artifact-filters</artifactId>
      <type>jar</type>
      <version>3.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-shared-utils</artifactId>
      <type>jar</type>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <type>jar</type>
      <version>2.5</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <type>jar</type>
      <version>1.7.5</version>
    </dependency>
  </dependencies>
</plugin>